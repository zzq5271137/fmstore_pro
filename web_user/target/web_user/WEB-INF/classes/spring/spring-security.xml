<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
        xmlns="http://www.springframework.org/schema/security"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- 配置放行的资源 -->
    <http pattern="/css/**" security="none"/>
    <http pattern="/img/**" security="none"/>
    <http pattern="/plugins/**" security="none"/>
    <http pattern="/js/**" security="none"/>

    <!-- 配置不拦截指定页面或请求 -->
    <http pattern="/login.html" security="none"/>
    <http pattern="/register.html" security="none"/>
    <http pattern="/favicon.ico" security="none"/>
    <http pattern="/user/sendCode.do" security="none"/>
    <http pattern="/user/addUser.do" security="none"/>

    <!-- use-expressions: 设置是否启动SpEL表达式, 默认值是true -->
    <http use-expressions="false">
        <!--
            配置SpringSecurity的拦截路径(拦截规则)
            1. pattern: 配置拦截规则
               a). /*: 代表的是根路径下的所有资源(不包含子路径)
               b). /**: 代表的是根路径下所有的资源(包含子路径)
            2. access: 设置角色
               写法: ROLE_角色名称, 如: ROLE_USER、ROLE_ADMIN;
        -->
        <intercept-url pattern="/**" access="ROLE_USER"/>

        <!--
            配置具体的页面跳转;
            login-page: 指定登录页面, 以/开始;
            login-processing-url: 登录请求路径(提交登录请求/进行认证的请求的路径), 默认值"/login";
            default-target-url: 登录成功后进入的页面;
            authentication-failure-url: 登录失败后进入的页面;

            逻辑跟Shiro差不多, 当有请求过来时, 会看这个请求是不是login-processing-url配置的请求路径:
            1. 如果是:
               就会直接去做认证(即进行用户名密码校验); 认证成功, 则跳转到default-target-url配置的页面,
               认证失败, 则跳转到authentication-failure-url配置的页面; 这也是为什么,
               我们的login.jsp中的登录表格的请求路径要写成login-processing-url配置的路径;
            2. 如果不是, 会看这个用户有没有认证过:
               a). 如果没有认证过, 就会跳转到login-page配置的页面, 让用户去输入用户名密码;
               b). 如果认证过了, 就会执行本来的那个请求(即放行);
        -->
        <form-login username-parameter="username"
                    password-parameter="password"
                    login-page="/login.html"
                    login-processing-url="/login"
                    default-target-url="/home.html"
                    always-use-default-target="true"
                    authentication-failure-url="/login.html"/>

        <!--
            配置退出/注销;
            invalidate-session: 是否刷新session,
            logout-url: 退出请求地址,
            logout-success-url: 退出成功后访问的页面;
        -->
        <logout logout-url="/logout" logout-success-url="/login.html"/>

        <!-- 不使用csrf的校验(关闭跨域请求) -->
        <csrf disabled="true"/>

        <!--
            配置框架页面不拦截;
            这个配置是设置html页面中可以使用html的iframe标签和frame标签;
        -->
        <headers>
            <frame-options policy="SAMEORIGIN"/>
        </headers>
    </http>

    <!-- 配置认证管理器 -->
    <authentication-manager>
        <!-- 认证信息的提供者, 使用自定义的用户认证器, 从数据库中查询用户名和密码 -->
        <authentication-provider user-service-ref="userDetailsService">
            <!-- 配置加密工具类, 登陆认证的时候对用户输入的密码进行加密 -->
            <password-encoder ref="passwordEncoder"/>
        </authentication-provider>
    </authentication-manager>

    <!--
        自定义的用户认证器, 从数据库中查询用户名和密码, 类似于Shiro中的自定义Realm;
        一个小细节, 这里使用Spring配置bean的标签前面加上了"beans:", 这是因为,
        当前配置文件的默认命名空间是xmlns="http://www.springframework.org/schema/security",
        所以上面的SpringSecurity的相关标签可以直接使用, 而Spring的相关标签需要加上前缀"beans",
        因为xmlns:beans="http://www.springframework.org/schema/beans";
    -->
    <beans:bean id="userDetailsService"
                class="com.mycomp.core.service.userlogin.UserDetailsServiceImpl">
        <!-- 通过bean的形式注入远程服务(不使用@Reference注解注入远程服务) -->
        <beans:property name="userService" ref="userService"/>
    </beans:bean>

    <!-- 配置加密工具类 -->
    <beans:bean id="passwordEncoder"
                class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!-- 通过bean的形式注入远程服务(不使用@Reference注解注入远程服务) -->
    <dubbo:reference id="userService"
                     interface="com.mycomp.core.service.userservice.UserService"/>

</beans:beans>
